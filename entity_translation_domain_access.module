<?php

/**
 * @file
 *  Resticts entity translation based on user assigned domains.
 */

/**
 * Implements hook_permission().
 */
function entity_translation_domain_access_permission() {
  return array(
    'bypass entity translation domain access' => array(
      'title' => t('Bypass entity translation domain access'),
    ),
  );
}

/**
 * Implements hook_init().
 *
 * @todo: THIS MUST BE PORTED LATER INTO THE REDIRECTOR MODULE.
 */
function entity_translation_domain_access_init() {
  if(arg(0) == 'node' && is_numeric(arg(1)) && $node = node_load(arg(1))) {
    $current_domain = domain_get_domain();
    $domains = domain_get_node_domains($node->nid);
    if (!in_array($current_domain['domain_id'], $domains['domain_id'])) {
      $destination_domain = domain_lookup(reset($domains['domain_id']));
      // No destination allowed here.
      unset($_GET['destination']);
      if (!empty($destination_domain['variants'])) {
        drupal_goto($_GET['q'], array('domain_variant' => reset($destination_domain['variants'])), 301);
      }
      else {
        if ($destination_domain['domain_id'] > 0 && $current_domain['domain_id'] != $destination_domain['domain_id']) {
          $path = domain_get_uri($destination_domain);
          drupal_goto($path, array(), 301);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function entity_translation_domain_access_entity_info_alter(&$info) {
  if (!empty($info['node']['translation']['entity_translation'])) {
    $info['node']['translation']['entity_translation']['class'] = 'ETDAEntityTranslationNodeHandler';
  }
}

/**
 * Implements hook_menu().
 */
function entity_translation_domain_access_menu() {
  $items = array();
  $items['admin/structure/domain/view/%domain/entity-translation'] = array(
    'title' => 'Entity translation languages',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_translation_domain_access_admin_form', 4),
    'access arguments' => array('administer domains'),
    'file' => 'entity_translation_domain_access.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function entity_translation_domain_access_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Use the same check as entity_translation_menu_local_tasks_alter().
  $handler = entity_translation_get_handler();
  if (!empty($handler) && $handler->isEntityForm() && $handler->getLanguage() != LANGUAGE_NONE && drupal_multilingual()) {
    // Remove translations inaccessible for a user.
    if (!empty($data['tabs'][1]['output'])) {
      foreach ($data['tabs'][1]['output'] as $key => $link) {
        // Double check that we have the correct link.
        if (isset($link['#link']['access_callback']) && $link['#link']['access_callback'] == 'entity_translation_edit_access') {
          $args = menu_unserialize($link['#link']['access_arguments'], $link['#link']['map']);
          $path_parts = explode('/', $link['#link']['href']);
          $entity_type = $args[0];
          $entity = $args[1];
          $translation_langcode = array_pop($path_parts);
          if (!EntityTranslationDomainAccess::checkTranslationAccess($entity_type, $entity, $translation_langcode, 'edit')) {
            unset($data['tabs'][1]['output'][$key]);
          }
        }
      }
      $data['tabs'][1]['output'] = array_values($data['tabs'][1]['output']);
      $data['tabs'][1]['count'] = count($data['tabs'][1]['output']);
    }
  }
}

/**
 * Implements hook_node_access();
 */
function entity_translation_domain_access_node_access($node, $op, $account) {
  if ($op == 'delete') {
    if (!EntityTranslationDomainAccess::checkNodeActionAccess($node, $op)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function entity_translation_domain_access_form_node_form_alter(&$form, &$form_state) {
  $node = $form['#node'];

  if (!empty($node->status) && !EntityTranslationDomainAccess::checkNodeActionAccess($node, 'unpublish')) {
    $form['options']['status']['#disabled'] = TRUE;
  }

  // Prevent user to change the "Send to all affiliates" option if he/she is
  // not assigned to all domains.
  if (isset($form['domain']['domain_site'])) {
    if (!user_access('bypass entity translation domain access') && array_diff(array_keys(domain_domains()), EntityTranslationDomainAccess::getUserDomains())) {
      $form['domain']['domain_site']['#disabled'] = TRUE;
    }
  }
  // Prevent user to assign/unassign node domains he/she is not assigned to.
  // This is just a cosmetic change and it is not applied if the "domains" form
  // element is a "select". The real work happens on node save.
  /* @see entity_translation_domain_access_node_presave() */
  if (isset($form['domain']['domains'])) {
    if ($form['domain']['domains']['#type'] == 'checkboxes' && !user_access('bypass entity translation domain access')) {
      // Disable the domains for which the user does not have access.
      $diff_domains = array_diff_key($form['domain']['domains']['#options'], EntityTranslationDomainAccess::getUserDomains());
      if (!empty($diff_domains)) {
        foreach ($diff_domains as $domain_key => $value) {
          $form['domain']['domains'][$domain_key]['#disabled'] = TRUE;
        }
      }
      // We handle the required property ourselves.
      $form['domain']['domains']['#required'] = FALSE;
      $form['domain']['domains']['#element_validate'][] = 'entity_translation_domain_access_validate_node_domains';
    }
  }

  // Remove the languages for which the user does not have access, but only if
  // the field is not disabled.
  if (!empty($form['language']['#options']) && !user_access('bypass entity translation domain access') && empty($form['language']['#disabled'])) {
    $form['language']['#options'] = array_intersect_key($form['language']['#options'], EntityTranslationDomainAccess::getUserLangcodes());
  }
  // Additional submit handler to make sure we redirect to the node view page.
  $form['actions']['submit']['#submit'][] = 'entity_translation_domain_access_node_form_submit';
}

/**
 * Additional submit handler that will make sure that we redirect to the node
 * when the destination is 'front'. This can happen when a node is added to some
 * domain while the current domain is different. In this case we still want to
 * lead to the node because the user will be redirected afterwards.
 */
function entity_translation_domain_access_node_form_submit(&$form, &$form_state) {
  // @todo: should we have a different check here? Maybe to check that if the
  // user does NOT have access to the node, we still redirect there.
  if ($form_state['redirect'] == '<front>') {
    $form_state['redirect'] = 'node/' . $form_state['node']->nid;
  }
}

/**
 * Custom validation for the domains. We make sure that the node has at least
 * one domain selected.
 */
function entity_translation_domain_access_validate_node_domains($element, &$form_state) {
  $selected_domains = array_filter($form_state['values']['domains']);
  // If the user did not select any domain, we have to make sure that the node
  // domains contain at least one domain where the user does not have access.
  if (empty($selected_domains)) {
    if (empty($form_state['node']->domains) || array_diff_key($form_state['node']->domains, EntityTranslationDomainAccess::getUserDomains()) == FALSE) {
      form_set_error('domains', t('You have to select at least one domain.'));
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function entity_translation_domain_access_node_presave($node) {
  if (!drupal_is_cli() && !empty($node->original->status) && empty($node->status) && !EntityTranslationDomainAccess::checkNodeActionAccess($node, 'unpublish')) {
    // The reason to prevent unpublishing in hook_node_presave() is that there
    // are too many places from where the unpublishing could be performed:
    //   - node edit form
    //   - VBO
    //   - standard admin/content (uses node_mass_update() which does not check
    //     permission at all)
    //   - node_unpublish_action()
    // In most of these cases, we alter the access, so we actually should never
    // reach this line.
    $node->status = NODE_PUBLISHED;
    drupal_set_message(t('The content %title has not been unpublished because either it assigned to domains that you are not assigned to, or it has translations you do not have access to.', array('%title' => entity_label('node', $node))), 'error');
    watchdog('entity_translation_domain_access', 'Prevented node unpublish attempt. Node: !node, user: !user', array(
      '!node' => l(entity_label('node', $node), 'node/' . $node->nid),
      '!user' => l(entity_label('user', $GLOBALS['user']), 'user/' . $GLOBALS['user']->uid),
    ), WATCHDOG_WARNING);
  }

  // Prevent user to assign/unassign node domains he/she is not assigned to.
  if (!user_access('bypass entity translation domain access')) {
    $user_domains = EntityTranslationDomainAccess::getUserDomains();
    foreach (domain_domains() as $domain_id => $_) {
      if (!in_array($domain_id, $user_domains)) {
        $node->domains[$domain_id] = isset($node->original->domains[$domain_id]) ? $node->original->domains[$domain_id] : 0;
      }
    }
  }
}

/**
 * Implements hook_ctools_plugin_post_alter().
 */
function entity_translation_domain_access_ctools_plugin_post_alter(&$plugin, &$info) {
  if ($info['module'] == 'views_bulk_operations' && $info['type'] == 'operation_types' && $plugin['name'] == 'action') {
    // We actually need to replace the class. But if we just replace it, it
    // won't be processed by the ctools_registry_files_alter(), so our class
    // will not be created because it will extend non existing class.
    // So, we do the trick:
    // 1. Register file of original class manually.
    // 2. Leave $plugin['handler']['file'] unchanged, so Ctools still knows
    //    where the plugin lives.
    // 3. Add relative path to $plugin['handler']['file'].
    $registry_files_alter =& drupal_static('entity_translation_domain_access_registry_files_alter', array());
    $registry_files_alter[$plugin['path'] . '/' . $plugin['handler']['file']] = array(
      'module' => 'views_bulk_operations',
      'weight' => 0,
    );
    $relative_path = entity_translation_domain_access_get_relative_path($plugin['path'], drupal_get_path('module', 'entity_translation_domain_access') . '/includes');
    $plugin['handler']['file'] = $relative_path . '/EntityTranslationDomainAccessViewsBulkOperationsAction.inc';
    $plugin['handler']['class'] = 'EntityTranslationDomainAccessViewsBulkOperationsAction';
  }
}

/**
 * Implements hook_registry_files_alter().
 */
function entity_translation_domain_access_registry_files_alter(&$files, $indexed_modules) {
  $registry_files_alter =& drupal_static(__FUNCTION__, array());
  foreach ($registry_files_alter as $path => $info) {
    $files[$path] = $info;
  }
}

/**
   * Returns a relative path between $start_dir and $final_dir.
   *
   * @link http://php.net/manual/en/function.realpath.php#76453
   *
   * @param string $start_dir
   * @param string $final_dir
   *
   * @return string
   */
function entity_translation_domain_access_get_relative_path($start_dir, $final_dir){
  $first_path_parts = explode('/', $start_dir);
  $second_path_parts = explode('/', $final_dir);
  $same_counter = 0;
  for ($i = 0; $i < min(count($first_path_parts), count($second_path_parts)); $i++) {
    if (strtolower($first_path_parts[$i]) !== strtolower($second_path_parts[$i])) {
      break;
    }
    $same_counter++;
  }
  if ($same_counter == 0) {
    return $final_dir;
  }
  $new_path = '';
  for ($i = $same_counter; $i < count($first_path_parts); $i++) {
    if ($i > $same_counter) {
      $new_path .= '/';
    }
    $new_path .= '..';
  }
  if (count($new_path) == 0) {
    $new_path = '.';
  }
  for ($i = $same_counter; $i < count($second_path_parts); $i++) {
    $new_path .= '/';
    $new_path .= $second_path_parts[$i];
  }
  return $new_path;
}

/**
 * Helper function to reset the domain node settings.
 */
function _entity_translation_domain_access_reset_domain_node_settings() {
  $node_types = node_type_get_names();
  foreach ($node_types as $type_key => $type_name) {
    variable_set('domain_node_' . $type_key, array());
  }
}
